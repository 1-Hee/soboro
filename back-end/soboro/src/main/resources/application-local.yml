spring:
  datasource:
<<<<<<< HEAD
<<<<<<< HEAD
    url: jdbc:mariadb://host.docker.internal:3306/soborodb
=======
    url: jdbc:mariadb://localhost:3306/soborodb
>>>>>>> 6a3ba33 (chore  : local yml 참조주소 변경 및 tts 저장 aws 주소 추가)
=======
    url: jdbc:mariadb://host.docker.internal:3306/soborodb
>>>>>>> d1b55a8 (Merge branch 'BE' into 'doyeong')
    driver-class-name: org.mariadb.jdbc.Driver
    username: root
    password: root
    hikari:
      pool-name: jpa-hikari-pool
      maximum-pool-size: 5
      jdbc-url: ${spring.datasource.url}
      username: ${spring.datasource.username}
      password: ${spring.datasource.password}
      driver-class-name: ${spring.datasource.driver-class-name}
      data-source-properties:
        rewriteBatchedStatements: true
  jpa:
    database: mysql
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    properties:
      hibernate:
        jdbc.batch_size: 1000
        format_sql: true
        show_sql: true
        use_sql_comments: true
    defer-datasource-initialization: true
  data:
    mongodb:
<<<<<<< HEAD
<<<<<<< HEAD
      host: host.docker.internal
=======
      host: localhost
>>>>>>> 6a3ba33 (chore  : local yml 참조주소 변경 및 tts 저장 aws 주소 추가)
=======
      host: host.docker.internal
>>>>>>> d1b55a8 (Merge branch 'BE' into 'doyeong')
      port: 27017
      authentication-database: admin
      database: soborodb
      username: root
      password: '1q2w3e4r'
  redis:
    lettuce:
      pool:
        max-active: 10
        max-idle: 10
        min-idle: 2
    port: 6363
<<<<<<< HEAD
<<<<<<< HEAD
    host: host.docker.internal
=======
    host: localhost
>>>>>>> 6a3ba33 (chore  : local yml 참조주소 변경 및 tts 저장 aws 주소 추가)
=======
    host: host.docker.internal
>>>>>>> d1b55a8 (Merge branch 'BE' into 'doyeong')
    password: '1q2w3e4r'
  security:
    oauth2.client:
      registration:
        kakao:
          clientId: clientId
          clientSecret: clientSecret
          clientAuthenticationMethod: post
          authorizationGrantType: authorization_code
          redirectUri: http://localhost:8080/login/oauth2/code/kakao
          scope:
            - profile_nickname
            - profile_image
            - account_email
          clientName: Kakao
      # Provider 설정
      provider:
        kakao:
          authorizationUri: https://kauth.kakao.com/oauth/authorize
          tokenUri: https://kauth.kakao.com/oauth/token
          userInfoUri: https://kapi.kakao.com/v2/user/me
          userNameAttribute: id

# cors 설정
cors:
  allowed-origins: 'http://localhost:3000'
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
  allowed-headers: '*'
  max-age: 3600

# jwt secret key 설정
jwt.secret: '926D96C90030DD58429D2751AC1BDBBC1AC1BDBBCD2751AC1BDBBC1AC1BDBBC'

# 토큰 관련 secret Key 및 RedirectUri 설정
app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC1AC1BDBBCD2751AC1BDBBC1AC1BDBBC
    tokenExpiry: 1800000
    refreshTokenExpiry: 604800000
  oauth2:
    authorizedRedirectUris:
      - http://localhost:3000/oauth/redirect
  prefix:
    ttsPrefix : /home/ubuntu/data/temp-tts/

logging:
  level:
    root: info
    org:
      hibernate: info

